// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public enum PACKET_ID : ushort
{
  CS_GREET = 1,
  SC_GREET = 2,
  CS_LOGIN = 3,
  SC_LOGIN = 4,
  CS_ENTER_GAME = 5,
  SC_ENTER_GAME = 6,
  SC_START_GAME = 7,
  CS_UNIT_SPAWN = 8,
  SC_UNIT_SPAWN = 9,
  SC_UNIT_MOVE = 10,
  SC_UNIT_ATTACK = 11,
  SC_REMOVE_UNIT = 12,
  SC_END_GAME = 13,
  SC_ENTER_LOBBY = 14,
  SC_PLAYER_COST_UPDATE = 15,
  SC_PLAYER_HAND_UPDATE = 16,
  CM_MATCH_START = 17,
  MC_MATCH_JOIN_INFO = 18,
  MC_PLAYER_REGISTERED = 19,
  MG_GAME_READY = 20,
  PACKET_MAX = 21,
};

public struct Vec2 : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static Vec2 GetRootAsVec2(ByteBuffer _bb) { return GetRootAsVec2(_bb, new Vec2()); }
  public static Vec2 GetRootAsVec2(ByteBuffer _bb, Vec2 obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Vec2 __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public float X { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float Y { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }

  public static Offset<Vec2> CreateVec2(FlatBufferBuilder builder,
      float x = 0.0f,
      float y = 0.0f) {
    builder.StartTable(2);
    Vec2.AddY(builder, y);
    Vec2.AddX(builder, x);
    return Vec2.EndVec2(builder);
  }

  public static void StartVec2(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddX(FlatBufferBuilder builder, float x) { builder.AddFloat(0, x, 0.0f); }
  public static void AddY(FlatBufferBuilder builder, float y) { builder.AddFloat(1, y, 0.0f); }
  public static Offset<Vec2> EndVec2(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Vec2>(o);
  }
}


static public class Vec2Verify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*X*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*Y*/, 4 /*float*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
public struct UnitStat : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static UnitStat GetRootAsUnitStat(ByteBuffer _bb) { return GetRootAsUnitStat(_bb, new UnitStat()); }
  public static UnitStat GetRootAsUnitStat(ByteBuffer _bb, UnitStat obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public UnitStat __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Attack { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int MaxHp { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int CurrHp { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public float Speed { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public int Cost { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public float AttackRange { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float Sight { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }

  public static Offset<UnitStat> CreateUnitStat(FlatBufferBuilder builder,
      int attack = 0,
      int maxHp = 0,
      int currHp = 0,
      float speed = 0.0f,
      int cost = 0,
      float attack_range = 0.0f,
      float sight = 0.0f) {
    builder.StartTable(7);
    UnitStat.AddSight(builder, sight);
    UnitStat.AddAttackRange(builder, attack_range);
    UnitStat.AddCost(builder, cost);
    UnitStat.AddSpeed(builder, speed);
    UnitStat.AddCurrHp(builder, currHp);
    UnitStat.AddMaxHp(builder, maxHp);
    UnitStat.AddAttack(builder, attack);
    return UnitStat.EndUnitStat(builder);
  }

  public static void StartUnitStat(FlatBufferBuilder builder) { builder.StartTable(7); }
  public static void AddAttack(FlatBufferBuilder builder, int attack) { builder.AddInt(0, attack, 0); }
  public static void AddMaxHp(FlatBufferBuilder builder, int maxHp) { builder.AddInt(1, maxHp, 0); }
  public static void AddCurrHp(FlatBufferBuilder builder, int currHp) { builder.AddInt(2, currHp, 0); }
  public static void AddSpeed(FlatBufferBuilder builder, float speed) { builder.AddFloat(3, speed, 0.0f); }
  public static void AddCost(FlatBufferBuilder builder, int cost) { builder.AddInt(4, cost, 0); }
  public static void AddAttackRange(FlatBufferBuilder builder, float attackRange) { builder.AddFloat(5, attackRange, 0.0f); }
  public static void AddSight(FlatBufferBuilder builder, float sight) { builder.AddFloat(6, sight, 0.0f); }
  public static Offset<UnitStat> EndUnitStat(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<UnitStat>(o);
  }
}


static public class UnitStatVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Attack*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*MaxHp*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*CurrHp*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 10 /*Speed*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 12 /*Cost*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 14 /*AttackRange*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 16 /*Sight*/, 4 /*float*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
public struct CardInfo : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static CardInfo GetRootAsCardInfo(ByteBuffer _bb) { return GetRootAsCardInfo(_bb, new CardInfo()); }
  public static CardInfo GetRootAsCardInfo(ByteBuffer _bb, CardInfo obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public CardInfo __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int UnitType { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Cost { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Name { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(8); }

  public static Offset<CardInfo> CreateCardInfo(FlatBufferBuilder builder,
      int unit_type = 0,
      int cost = 0,
      StringOffset nameOffset = default(StringOffset)) {
    builder.StartTable(3);
    CardInfo.AddName(builder, nameOffset);
    CardInfo.AddCost(builder, cost);
    CardInfo.AddUnitType(builder, unit_type);
    return CardInfo.EndCardInfo(builder);
  }

  public static void StartCardInfo(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddUnitType(FlatBufferBuilder builder, int unitType) { builder.AddInt(0, unitType, 0); }
  public static void AddCost(FlatBufferBuilder builder, int cost) { builder.AddInt(1, cost, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(2, nameOffset.Value, 0); }
  public static Offset<CardInfo> EndCardInfo(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<CardInfo>(o);
  }
}


static public class CardInfoVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*UnitType*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*Cost*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 8 /*Name*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
public struct CS_GREET : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static CS_GREET GetRootAsCS_GREET(ByteBuffer _bb) { return GetRootAsCS_GREET(_bb, new CS_GREET()); }
  public static CS_GREET GetRootAsCS_GREET(ByteBuffer _bb, CS_GREET obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public CS_GREET __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Data { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDataBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetDataBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetDataArray() { return __p.__vector_as_array<byte>(4); }

  public static Offset<CS_GREET> CreateCS_GREET(FlatBufferBuilder builder,
      StringOffset dataOffset = default(StringOffset)) {
    builder.StartTable(1);
    CS_GREET.AddData(builder, dataOffset);
    return CS_GREET.EndCS_GREET(builder);
  }

  public static void StartCS_GREET(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddData(FlatBufferBuilder builder, StringOffset dataOffset) { builder.AddOffset(0, dataOffset.Value, 0); }
  public static Offset<CS_GREET> EndCS_GREET(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<CS_GREET>(o);
  }
}


static public class CS_GREETVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*Data*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
public struct SC_GREET : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static SC_GREET GetRootAsSC_GREET(ByteBuffer _bb) { return GetRootAsSC_GREET(_bb, new SC_GREET()); }
  public static SC_GREET GetRootAsSC_GREET(ByteBuffer _bb, SC_GREET obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SC_GREET __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Values(int j) { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int ValuesLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetValuesBytes() { return __p.__vector_as_span<int>(4, 4); }
#else
  public ArraySegment<byte>? GetValuesBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public int[] GetValuesArray() { return __p.__vector_as_array<int>(4); }
  public string Answer { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAnswerBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetAnswerBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetAnswerArray() { return __p.__vector_as_array<byte>(6); }

  public static Offset<SC_GREET> CreateSC_GREET(FlatBufferBuilder builder,
      VectorOffset valuesOffset = default(VectorOffset),
      StringOffset answerOffset = default(StringOffset)) {
    builder.StartTable(2);
    SC_GREET.AddAnswer(builder, answerOffset);
    SC_GREET.AddValues(builder, valuesOffset);
    return SC_GREET.EndSC_GREET(builder);
  }

  public static void StartSC_GREET(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddValues(FlatBufferBuilder builder, VectorOffset valuesOffset) { builder.AddOffset(0, valuesOffset.Value, 0); }
  public static VectorOffset CreateValuesVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateValuesVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateValuesVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateValuesVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartValuesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddAnswer(FlatBufferBuilder builder, StringOffset answerOffset) { builder.AddOffset(1, answerOffset.Value, 0); }
  public static Offset<SC_GREET> EndSC_GREET(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<SC_GREET>(o);
  }
}


static public class SC_GREETVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyVectorOfData(tablePos, 4 /*Values*/, 4 /*int*/, false)
      && verifier.VerifyString(tablePos, 6 /*Answer*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
public struct CS_LOGIN : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static CS_LOGIN GetRootAsCS_LOGIN(ByteBuffer _bb) { return GetRootAsCS_LOGIN(_bb, new CS_LOGIN()); }
  public static CS_LOGIN GetRootAsCS_LOGIN(ByteBuffer _bb, CS_LOGIN obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public CS_LOGIN __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long PlayerId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long MatchId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }

  public static Offset<CS_LOGIN> CreateCS_LOGIN(FlatBufferBuilder builder,
      long player_id = 0,
      long match_id = 0) {
    builder.StartTable(2);
    CS_LOGIN.AddMatchId(builder, match_id);
    CS_LOGIN.AddPlayerId(builder, player_id);
    return CS_LOGIN.EndCS_LOGIN(builder);
  }

  public static void StartCS_LOGIN(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddPlayerId(FlatBufferBuilder builder, long playerId) { builder.AddLong(0, playerId, 0); }
  public static void AddMatchId(FlatBufferBuilder builder, long matchId) { builder.AddLong(1, matchId, 0); }
  public static Offset<CS_LOGIN> EndCS_LOGIN(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<CS_LOGIN>(o);
  }
}


static public class CS_LOGINVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*PlayerId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 6 /*MatchId*/, 8 /*long*/, 8, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
public struct SC_LOGIN : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static SC_LOGIN GetRootAsSC_LOGIN(ByteBuffer _bb) { return GetRootAsSC_LOGIN(_bb, new SC_LOGIN()); }
  public static SC_LOGIN GetRootAsSC_LOGIN(ByteBuffer _bb, SC_LOGIN obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SC_LOGIN __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long RoomId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }

  public static Offset<SC_LOGIN> CreateSC_LOGIN(FlatBufferBuilder builder,
      long room_id = 0) {
    builder.StartTable(1);
    SC_LOGIN.AddRoomId(builder, room_id);
    return SC_LOGIN.EndSC_LOGIN(builder);
  }

  public static void StartSC_LOGIN(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddRoomId(FlatBufferBuilder builder, long roomId) { builder.AddLong(0, roomId, 0); }
  public static Offset<SC_LOGIN> EndSC_LOGIN(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<SC_LOGIN>(o);
  }
}


static public class SC_LOGINVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*RoomId*/, 8 /*long*/, 8, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
public struct CS_ENTER_GAME : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static CS_ENTER_GAME GetRootAsCS_ENTER_GAME(ByteBuffer _bb) { return GetRootAsCS_ENTER_GAME(_bb, new CS_ENTER_GAME()); }
  public static CS_ENTER_GAME GetRootAsCS_ENTER_GAME(ByteBuffer _bb, CS_ENTER_GAME obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public CS_ENTER_GAME __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long PlayerId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long RoomId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }

  public static Offset<CS_ENTER_GAME> CreateCS_ENTER_GAME(FlatBufferBuilder builder,
      long player_id = 0,
      long room_id = 0) {
    builder.StartTable(2);
    CS_ENTER_GAME.AddRoomId(builder, room_id);
    CS_ENTER_GAME.AddPlayerId(builder, player_id);
    return CS_ENTER_GAME.EndCS_ENTER_GAME(builder);
  }

  public static void StartCS_ENTER_GAME(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddPlayerId(FlatBufferBuilder builder, long playerId) { builder.AddLong(0, playerId, 0); }
  public static void AddRoomId(FlatBufferBuilder builder, long roomId) { builder.AddLong(1, roomId, 0); }
  public static Offset<CS_ENTER_GAME> EndCS_ENTER_GAME(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<CS_ENTER_GAME>(o);
  }
}


static public class CS_ENTER_GAMEVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*PlayerId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 6 /*RoomId*/, 8 /*long*/, 8, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
public struct SC_ENTER_GAME : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static SC_ENTER_GAME GetRootAsSC_ENTER_GAME(ByteBuffer _bb) { return GetRootAsSC_ENTER_GAME(_bb, new SC_ENTER_GAME()); }
  public static SC_ENTER_GAME GetRootAsSC_ENTER_GAME(ByteBuffer _bb, SC_ENTER_GAME obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SC_ENTER_GAME __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long RoomId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long PlayerId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public byte PlayerSide { get { int o = __p.__offset(8); return o != 0 ? __p.bb.Get(o + __p.bb_pos) : (byte)0; } }
  public int CurrCost { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public CardInfo? PlayerHands(int j) { int o = __p.__offset(12); return o != 0 ? (CardInfo?)(new CardInfo()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int PlayerHandsLength { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<SC_ENTER_GAME> CreateSC_ENTER_GAME(FlatBufferBuilder builder,
      long room_id = 0,
      long player_id = 0,
      byte player_side = 0,
      int curr_cost = 0,
      VectorOffset player_handsOffset = default(VectorOffset)) {
    builder.StartTable(5);
    SC_ENTER_GAME.AddPlayerId(builder, player_id);
    SC_ENTER_GAME.AddRoomId(builder, room_id);
    SC_ENTER_GAME.AddPlayerHands(builder, player_handsOffset);
    SC_ENTER_GAME.AddCurrCost(builder, curr_cost);
    SC_ENTER_GAME.AddPlayerSide(builder, player_side);
    return SC_ENTER_GAME.EndSC_ENTER_GAME(builder);
  }

  public static void StartSC_ENTER_GAME(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddRoomId(FlatBufferBuilder builder, long roomId) { builder.AddLong(0, roomId, 0); }
  public static void AddPlayerId(FlatBufferBuilder builder, long playerId) { builder.AddLong(1, playerId, 0); }
  public static void AddPlayerSide(FlatBufferBuilder builder, byte playerSide) { builder.AddByte(2, playerSide, 0); }
  public static void AddCurrCost(FlatBufferBuilder builder, int currCost) { builder.AddInt(3, currCost, 0); }
  public static void AddPlayerHands(FlatBufferBuilder builder, VectorOffset playerHandsOffset) { builder.AddOffset(4, playerHandsOffset.Value, 0); }
  public static VectorOffset CreatePlayerHandsVector(FlatBufferBuilder builder, Offset<CardInfo>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreatePlayerHandsVectorBlock(FlatBufferBuilder builder, Offset<CardInfo>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePlayerHandsVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<CardInfo>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePlayerHandsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<CardInfo>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartPlayerHandsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<SC_ENTER_GAME> EndSC_ENTER_GAME(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<SC_ENTER_GAME>(o);
  }
}


static public class SC_ENTER_GAMEVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*RoomId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 6 /*PlayerId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 8 /*PlayerSide*/, 1 /*byte*/, 1, false)
      && verifier.VerifyField(tablePos, 10 /*CurrCost*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfTables(tablePos, 12 /*PlayerHands*/, CardInfoVerify.Verify, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
public struct SC_START_GAME : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static SC_START_GAME GetRootAsSC_START_GAME(ByteBuffer _bb) { return GetRootAsSC_START_GAME(_bb, new SC_START_GAME()); }
  public static SC_START_GAME GetRootAsSC_START_GAME(ByteBuffer _bb, SC_START_GAME obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SC_START_GAME __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }


  public static void StartSC_START_GAME(FlatBufferBuilder builder) { builder.StartTable(0); }
  public static Offset<SC_START_GAME> EndSC_START_GAME(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<SC_START_GAME>(o);
  }
}


static public class SC_START_GAMEVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyTableEnd(tablePos);
  }
}
public struct CS_UNIT_SPAWN : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static CS_UNIT_SPAWN GetRootAsCS_UNIT_SPAWN(ByteBuffer _bb) { return GetRootAsCS_UNIT_SPAWN(_bb, new CS_UNIT_SPAWN()); }
  public static CS_UNIT_SPAWN GetRootAsCS_UNIT_SPAWN(ByteBuffer _bb, CS_UNIT_SPAWN obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public CS_UNIT_SPAWN __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long RoomId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public int UnitType { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public Vec2? CreatePos { get { int o = __p.__offset(8); return o != 0 ? (Vec2?)(new Vec2()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

  public static Offset<CS_UNIT_SPAWN> CreateCS_UNIT_SPAWN(FlatBufferBuilder builder,
      long room_id = 0,
      int unit_type = 0,
      Offset<Vec2> create_posOffset = default(Offset<Vec2>)) {
    builder.StartTable(3);
    CS_UNIT_SPAWN.AddRoomId(builder, room_id);
    CS_UNIT_SPAWN.AddCreatePos(builder, create_posOffset);
    CS_UNIT_SPAWN.AddUnitType(builder, unit_type);
    return CS_UNIT_SPAWN.EndCS_UNIT_SPAWN(builder);
  }

  public static void StartCS_UNIT_SPAWN(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddRoomId(FlatBufferBuilder builder, long roomId) { builder.AddLong(0, roomId, 0); }
  public static void AddUnitType(FlatBufferBuilder builder, int unitType) { builder.AddInt(1, unitType, 0); }
  public static void AddCreatePos(FlatBufferBuilder builder, Offset<Vec2> createPosOffset) { builder.AddOffset(2, createPosOffset.Value, 0); }
  public static Offset<CS_UNIT_SPAWN> EndCS_UNIT_SPAWN(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<CS_UNIT_SPAWN>(o);
  }
}


static public class CS_UNIT_SPAWNVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*RoomId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 6 /*UnitType*/, 4 /*int*/, 4, false)
      && verifier.VerifyTable(tablePos, 8 /*CreatePos*/, Vec2Verify.Verify, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
public struct SC_UNIT_SPAWN : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static SC_UNIT_SPAWN GetRootAsSC_UNIT_SPAWN(ByteBuffer _bb) { return GetRootAsSC_UNIT_SPAWN(_bb, new SC_UNIT_SPAWN()); }
  public static SC_UNIT_SPAWN GetRootAsSC_UNIT_SPAWN(ByteBuffer _bb, SC_UNIT_SPAWN obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SC_UNIT_SPAWN __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long UnitId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public sbyte PlayerSide { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetSbyte(o + __p.bb_pos) : (sbyte)0; } }
  public int UnitType { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public Vec2? CreatePos { get { int o = __p.__offset(10); return o != 0 ? (Vec2?)(new Vec2()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public UnitStat? UnitStat { get { int o = __p.__offset(12); return o != 0 ? (UnitStat?)(new UnitStat()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

  public static Offset<SC_UNIT_SPAWN> CreateSC_UNIT_SPAWN(FlatBufferBuilder builder,
      long unit_id = 0,
      sbyte player_side = 0,
      int unit_type = 0,
      Offset<Vec2> create_posOffset = default(Offset<Vec2>),
      Offset<UnitStat> unit_statOffset = default(Offset<UnitStat>)) {
    builder.StartTable(5);
    SC_UNIT_SPAWN.AddUnitId(builder, unit_id);
    SC_UNIT_SPAWN.AddUnitStat(builder, unit_statOffset);
    SC_UNIT_SPAWN.AddCreatePos(builder, create_posOffset);
    SC_UNIT_SPAWN.AddUnitType(builder, unit_type);
    SC_UNIT_SPAWN.AddPlayerSide(builder, player_side);
    return SC_UNIT_SPAWN.EndSC_UNIT_SPAWN(builder);
  }

  public static void StartSC_UNIT_SPAWN(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddUnitId(FlatBufferBuilder builder, long unitId) { builder.AddLong(0, unitId, 0); }
  public static void AddPlayerSide(FlatBufferBuilder builder, sbyte playerSide) { builder.AddSbyte(1, playerSide, 0); }
  public static void AddUnitType(FlatBufferBuilder builder, int unitType) { builder.AddInt(2, unitType, 0); }
  public static void AddCreatePos(FlatBufferBuilder builder, Offset<Vec2> createPosOffset) { builder.AddOffset(3, createPosOffset.Value, 0); }
  public static void AddUnitStat(FlatBufferBuilder builder, Offset<UnitStat> unitStatOffset) { builder.AddOffset(4, unitStatOffset.Value, 0); }
  public static Offset<SC_UNIT_SPAWN> EndSC_UNIT_SPAWN(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<SC_UNIT_SPAWN>(o);
  }
}


static public class SC_UNIT_SPAWNVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*UnitId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 6 /*PlayerSide*/, 1 /*sbyte*/, 1, false)
      && verifier.VerifyField(tablePos, 8 /*UnitType*/, 4 /*int*/, 4, false)
      && verifier.VerifyTable(tablePos, 10 /*CreatePos*/, Vec2Verify.Verify, false)
      && verifier.VerifyTable(tablePos, 12 /*UnitStat*/, UnitStatVerify.Verify, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
public struct SC_UNIT_MOVE : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static SC_UNIT_MOVE GetRootAsSC_UNIT_MOVE(ByteBuffer _bb) { return GetRootAsSC_UNIT_MOVE(_bb, new SC_UNIT_MOVE()); }
  public static SC_UNIT_MOVE GetRootAsSC_UNIT_MOVE(ByteBuffer _bb, SC_UNIT_MOVE obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SC_UNIT_MOVE __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long RoomId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long UnitId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public int UnitType { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public Vec2? NowPos { get { int o = __p.__offset(10); return o != 0 ? (Vec2?)(new Vec2()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

  public static Offset<SC_UNIT_MOVE> CreateSC_UNIT_MOVE(FlatBufferBuilder builder,
      long room_id = 0,
      long unit_id = 0,
      int unit_type = 0,
      Offset<Vec2> now_posOffset = default(Offset<Vec2>)) {
    builder.StartTable(4);
    SC_UNIT_MOVE.AddUnitId(builder, unit_id);
    SC_UNIT_MOVE.AddRoomId(builder, room_id);
    SC_UNIT_MOVE.AddNowPos(builder, now_posOffset);
    SC_UNIT_MOVE.AddUnitType(builder, unit_type);
    return SC_UNIT_MOVE.EndSC_UNIT_MOVE(builder);
  }

  public static void StartSC_UNIT_MOVE(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddRoomId(FlatBufferBuilder builder, long roomId) { builder.AddLong(0, roomId, 0); }
  public static void AddUnitId(FlatBufferBuilder builder, long unitId) { builder.AddLong(1, unitId, 0); }
  public static void AddUnitType(FlatBufferBuilder builder, int unitType) { builder.AddInt(2, unitType, 0); }
  public static void AddNowPos(FlatBufferBuilder builder, Offset<Vec2> nowPosOffset) { builder.AddOffset(3, nowPosOffset.Value, 0); }
  public static Offset<SC_UNIT_MOVE> EndSC_UNIT_MOVE(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<SC_UNIT_MOVE>(o);
  }
}


static public class SC_UNIT_MOVEVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*RoomId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 6 /*UnitId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 8 /*UnitType*/, 4 /*int*/, 4, false)
      && verifier.VerifyTable(tablePos, 10 /*NowPos*/, Vec2Verify.Verify, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
public struct SC_UNIT_ATTACK : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static SC_UNIT_ATTACK GetRootAsSC_UNIT_ATTACK(ByteBuffer _bb) { return GetRootAsSC_UNIT_ATTACK(_bb, new SC_UNIT_ATTACK()); }
  public static SC_UNIT_ATTACK GetRootAsSC_UNIT_ATTACK(ByteBuffer _bb, SC_UNIT_ATTACK obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SC_UNIT_ATTACK __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long RoomId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long AttackerId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long VictimId { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public int RemainHp { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<SC_UNIT_ATTACK> CreateSC_UNIT_ATTACK(FlatBufferBuilder builder,
      long room_id = 0,
      long attacker_id = 0,
      long victim_id = 0,
      int remain_hp = 0) {
    builder.StartTable(4);
    SC_UNIT_ATTACK.AddVictimId(builder, victim_id);
    SC_UNIT_ATTACK.AddAttackerId(builder, attacker_id);
    SC_UNIT_ATTACK.AddRoomId(builder, room_id);
    SC_UNIT_ATTACK.AddRemainHp(builder, remain_hp);
    return SC_UNIT_ATTACK.EndSC_UNIT_ATTACK(builder);
  }

  public static void StartSC_UNIT_ATTACK(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddRoomId(FlatBufferBuilder builder, long roomId) { builder.AddLong(0, roomId, 0); }
  public static void AddAttackerId(FlatBufferBuilder builder, long attackerId) { builder.AddLong(1, attackerId, 0); }
  public static void AddVictimId(FlatBufferBuilder builder, long victimId) { builder.AddLong(2, victimId, 0); }
  public static void AddRemainHp(FlatBufferBuilder builder, int remainHp) { builder.AddInt(3, remainHp, 0); }
  public static Offset<SC_UNIT_ATTACK> EndSC_UNIT_ATTACK(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<SC_UNIT_ATTACK>(o);
  }
}


static public class SC_UNIT_ATTACKVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*RoomId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 6 /*AttackerId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 8 /*VictimId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 10 /*RemainHp*/, 4 /*int*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
public struct SC_REMOVE_UNIT : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static SC_REMOVE_UNIT GetRootAsSC_REMOVE_UNIT(ByteBuffer _bb) { return GetRootAsSC_REMOVE_UNIT(_bb, new SC_REMOVE_UNIT()); }
  public static SC_REMOVE_UNIT GetRootAsSC_REMOVE_UNIT(ByteBuffer _bb, SC_REMOVE_UNIT obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SC_REMOVE_UNIT __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long RoomId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long UnitId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }

  public static Offset<SC_REMOVE_UNIT> CreateSC_REMOVE_UNIT(FlatBufferBuilder builder,
      long room_id = 0,
      long unit_id = 0) {
    builder.StartTable(2);
    SC_REMOVE_UNIT.AddUnitId(builder, unit_id);
    SC_REMOVE_UNIT.AddRoomId(builder, room_id);
    return SC_REMOVE_UNIT.EndSC_REMOVE_UNIT(builder);
  }

  public static void StartSC_REMOVE_UNIT(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddRoomId(FlatBufferBuilder builder, long roomId) { builder.AddLong(0, roomId, 0); }
  public static void AddUnitId(FlatBufferBuilder builder, long unitId) { builder.AddLong(1, unitId, 0); }
  public static Offset<SC_REMOVE_UNIT> EndSC_REMOVE_UNIT(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<SC_REMOVE_UNIT>(o);
  }
}


static public class SC_REMOVE_UNITVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*RoomId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 6 /*UnitId*/, 8 /*long*/, 8, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
public struct SC_END_GAME : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static SC_END_GAME GetRootAsSC_END_GAME(ByteBuffer _bb) { return GetRootAsSC_END_GAME(_bb, new SC_END_GAME()); }
  public static SC_END_GAME GetRootAsSC_END_GAME(ByteBuffer _bb, SC_END_GAME obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SC_END_GAME __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long RoomId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public sbyte WinnerPlayerSide { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetSbyte(o + __p.bb_pos) : (sbyte)0; } }
  public sbyte LoserPlayerSide { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetSbyte(o + __p.bb_pos) : (sbyte)0; } }

  public static Offset<SC_END_GAME> CreateSC_END_GAME(FlatBufferBuilder builder,
      long room_id = 0,
      sbyte winner_player_side = 0,
      sbyte loser_player_side = 0) {
    builder.StartTable(3);
    SC_END_GAME.AddRoomId(builder, room_id);
    SC_END_GAME.AddLoserPlayerSide(builder, loser_player_side);
    SC_END_GAME.AddWinnerPlayerSide(builder, winner_player_side);
    return SC_END_GAME.EndSC_END_GAME(builder);
  }

  public static void StartSC_END_GAME(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddRoomId(FlatBufferBuilder builder, long roomId) { builder.AddLong(0, roomId, 0); }
  public static void AddWinnerPlayerSide(FlatBufferBuilder builder, sbyte winnerPlayerSide) { builder.AddSbyte(1, winnerPlayerSide, 0); }
  public static void AddLoserPlayerSide(FlatBufferBuilder builder, sbyte loserPlayerSide) { builder.AddSbyte(2, loserPlayerSide, 0); }
  public static Offset<SC_END_GAME> EndSC_END_GAME(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<SC_END_GAME>(o);
  }
}


static public class SC_END_GAMEVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*RoomId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 6 /*WinnerPlayerSide*/, 1 /*sbyte*/, 1, false)
      && verifier.VerifyField(tablePos, 8 /*LoserPlayerSide*/, 1 /*sbyte*/, 1, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
public struct SC_PLAYER_COST_UPDATE : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static SC_PLAYER_COST_UPDATE GetRootAsSC_PLAYER_COST_UPDATE(ByteBuffer _bb) { return GetRootAsSC_PLAYER_COST_UPDATE(_bb, new SC_PLAYER_COST_UPDATE()); }
  public static SC_PLAYER_COST_UPDATE GetRootAsSC_PLAYER_COST_UPDATE(ByteBuffer _bb, SC_PLAYER_COST_UPDATE obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SC_PLAYER_COST_UPDATE __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long RoomId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public int RemainCost { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<SC_PLAYER_COST_UPDATE> CreateSC_PLAYER_COST_UPDATE(FlatBufferBuilder builder,
      long room_id = 0,
      int remain_cost = 0) {
    builder.StartTable(2);
    SC_PLAYER_COST_UPDATE.AddRoomId(builder, room_id);
    SC_PLAYER_COST_UPDATE.AddRemainCost(builder, remain_cost);
    return SC_PLAYER_COST_UPDATE.EndSC_PLAYER_COST_UPDATE(builder);
  }

  public static void StartSC_PLAYER_COST_UPDATE(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddRoomId(FlatBufferBuilder builder, long roomId) { builder.AddLong(0, roomId, 0); }
  public static void AddRemainCost(FlatBufferBuilder builder, int remainCost) { builder.AddInt(1, remainCost, 0); }
  public static Offset<SC_PLAYER_COST_UPDATE> EndSC_PLAYER_COST_UPDATE(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<SC_PLAYER_COST_UPDATE>(o);
  }
}


static public class SC_PLAYER_COST_UPDATEVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*RoomId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 6 /*RemainCost*/, 4 /*int*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
public struct SC_PLAYER_HAND_UPDATE : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static SC_PLAYER_HAND_UPDATE GetRootAsSC_PLAYER_HAND_UPDATE(ByteBuffer _bb) { return GetRootAsSC_PLAYER_HAND_UPDATE(_bb, new SC_PLAYER_HAND_UPDATE()); }
  public static SC_PLAYER_HAND_UPDATE GetRootAsSC_PLAYER_HAND_UPDATE(ByteBuffer _bb, SC_PLAYER_HAND_UPDATE obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SC_PLAYER_HAND_UPDATE __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long RoomId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long PlayerId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public CardInfo? PlayerHands(int j) { int o = __p.__offset(8); return o != 0 ? (CardInfo?)(new CardInfo()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int PlayerHandsLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<SC_PLAYER_HAND_UPDATE> CreateSC_PLAYER_HAND_UPDATE(FlatBufferBuilder builder,
      long room_id = 0,
      long player_id = 0,
      VectorOffset player_handsOffset = default(VectorOffset)) {
    builder.StartTable(3);
    SC_PLAYER_HAND_UPDATE.AddPlayerId(builder, player_id);
    SC_PLAYER_HAND_UPDATE.AddRoomId(builder, room_id);
    SC_PLAYER_HAND_UPDATE.AddPlayerHands(builder, player_handsOffset);
    return SC_PLAYER_HAND_UPDATE.EndSC_PLAYER_HAND_UPDATE(builder);
  }

  public static void StartSC_PLAYER_HAND_UPDATE(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddRoomId(FlatBufferBuilder builder, long roomId) { builder.AddLong(0, roomId, 0); }
  public static void AddPlayerId(FlatBufferBuilder builder, long playerId) { builder.AddLong(1, playerId, 0); }
  public static void AddPlayerHands(FlatBufferBuilder builder, VectorOffset playerHandsOffset) { builder.AddOffset(2, playerHandsOffset.Value, 0); }
  public static VectorOffset CreatePlayerHandsVector(FlatBufferBuilder builder, Offset<CardInfo>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreatePlayerHandsVectorBlock(FlatBufferBuilder builder, Offset<CardInfo>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePlayerHandsVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<CardInfo>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePlayerHandsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<CardInfo>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartPlayerHandsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<SC_PLAYER_HAND_UPDATE> EndSC_PLAYER_HAND_UPDATE(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<SC_PLAYER_HAND_UPDATE>(o);
  }
}


static public class SC_PLAYER_HAND_UPDATEVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*RoomId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 6 /*PlayerId*/, 8 /*long*/, 8, false)
      && verifier.VerifyVectorOfTables(tablePos, 8 /*PlayerHands*/, CardInfoVerify.Verify, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
public struct CM_MATCH_START : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static CM_MATCH_START GetRootAsCM_MATCH_START(ByteBuffer _bb) { return GetRootAsCM_MATCH_START(_bb, new CM_MATCH_START()); }
  public static CM_MATCH_START GetRootAsCM_MATCH_START(ByteBuffer _bb, CM_MATCH_START obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public CM_MATCH_START __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }


  public static void StartCM_MATCH_START(FlatBufferBuilder builder) { builder.StartTable(0); }
  public static Offset<CM_MATCH_START> EndCM_MATCH_START(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<CM_MATCH_START>(o);
  }
}


static public class CM_MATCH_STARTVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyTableEnd(tablePos);
  }
}
public struct MC_MATCH_JOIN_INFO : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static MC_MATCH_JOIN_INFO GetRootAsMC_MATCH_JOIN_INFO(ByteBuffer _bb) { return GetRootAsMC_MATCH_JOIN_INFO(_bb, new MC_MATCH_JOIN_INFO()); }
  public static MC_MATCH_JOIN_INFO GetRootAsMC_MATCH_JOIN_INFO(ByteBuffer _bb, MC_MATCH_JOIN_INFO obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public MC_MATCH_JOIN_INFO __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long PlayerId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long MatchId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public string Ip { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIpBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetIpBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetIpArray() { return __p.__vector_as_array<byte>(8); }
  public int Port { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<MC_MATCH_JOIN_INFO> CreateMC_MATCH_JOIN_INFO(FlatBufferBuilder builder,
      long player_id = 0,
      long match_id = 0,
      StringOffset ipOffset = default(StringOffset),
      int port = 0) {
    builder.StartTable(4);
    MC_MATCH_JOIN_INFO.AddMatchId(builder, match_id);
    MC_MATCH_JOIN_INFO.AddPlayerId(builder, player_id);
    MC_MATCH_JOIN_INFO.AddPort(builder, port);
    MC_MATCH_JOIN_INFO.AddIp(builder, ipOffset);
    return MC_MATCH_JOIN_INFO.EndMC_MATCH_JOIN_INFO(builder);
  }

  public static void StartMC_MATCH_JOIN_INFO(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddPlayerId(FlatBufferBuilder builder, long playerId) { builder.AddLong(0, playerId, 0); }
  public static void AddMatchId(FlatBufferBuilder builder, long matchId) { builder.AddLong(1, matchId, 0); }
  public static void AddIp(FlatBufferBuilder builder, StringOffset ipOffset) { builder.AddOffset(2, ipOffset.Value, 0); }
  public static void AddPort(FlatBufferBuilder builder, int port) { builder.AddInt(3, port, 0); }
  public static Offset<MC_MATCH_JOIN_INFO> EndMC_MATCH_JOIN_INFO(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<MC_MATCH_JOIN_INFO>(o);
  }
}


static public class MC_MATCH_JOIN_INFOVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*PlayerId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 6 /*MatchId*/, 8 /*long*/, 8, false)
      && verifier.VerifyString(tablePos, 8 /*Ip*/, false)
      && verifier.VerifyField(tablePos, 10 /*Port*/, 4 /*int*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
public struct MC_PLAYER_REGISTERED : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static MC_PLAYER_REGISTERED GetRootAsMC_PLAYER_REGISTERED(ByteBuffer _bb) { return GetRootAsMC_PLAYER_REGISTERED(_bb, new MC_PLAYER_REGISTERED()); }
  public static MC_PLAYER_REGISTERED GetRootAsMC_PLAYER_REGISTERED(ByteBuffer _bb, MC_PLAYER_REGISTERED obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public MC_PLAYER_REGISTERED __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long PlayerId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }

  public static Offset<MC_PLAYER_REGISTERED> CreateMC_PLAYER_REGISTERED(FlatBufferBuilder builder,
      long player_id = 0) {
    builder.StartTable(1);
    MC_PLAYER_REGISTERED.AddPlayerId(builder, player_id);
    return MC_PLAYER_REGISTERED.EndMC_PLAYER_REGISTERED(builder);
  }

  public static void StartMC_PLAYER_REGISTERED(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddPlayerId(FlatBufferBuilder builder, long playerId) { builder.AddLong(0, playerId, 0); }
  public static Offset<MC_PLAYER_REGISTERED> EndMC_PLAYER_REGISTERED(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<MC_PLAYER_REGISTERED>(o);
  }
}


static public class MC_PLAYER_REGISTEREDVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*PlayerId*/, 8 /*long*/, 8, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
public struct MG_GAME_READY : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static MG_GAME_READY GetRootAsMG_GAME_READY(ByteBuffer _bb) { return GetRootAsMG_GAME_READY(_bb, new MG_GAME_READY()); }
  public static MG_GAME_READY GetRootAsMG_GAME_READY(ByteBuffer _bb, MG_GAME_READY obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public MG_GAME_READY __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long MatchId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long PlayerId1 { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long PlayerId2 { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }

  public static Offset<MG_GAME_READY> CreateMG_GAME_READY(FlatBufferBuilder builder,
      long match_id = 0,
      long player_id_1 = 0,
      long player_id_2 = 0) {
    builder.StartTable(3);
    MG_GAME_READY.AddPlayerId2(builder, player_id_2);
    MG_GAME_READY.AddPlayerId1(builder, player_id_1);
    MG_GAME_READY.AddMatchId(builder, match_id);
    return MG_GAME_READY.EndMG_GAME_READY(builder);
  }

  public static void StartMG_GAME_READY(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddMatchId(FlatBufferBuilder builder, long matchId) { builder.AddLong(0, matchId, 0); }
  public static void AddPlayerId1(FlatBufferBuilder builder, long playerId1) { builder.AddLong(1, playerId1, 0); }
  public static void AddPlayerId2(FlatBufferBuilder builder, long playerId2) { builder.AddLong(2, playerId2, 0); }
  public static Offset<MG_GAME_READY> EndMG_GAME_READY(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<MG_GAME_READY>(o);
  }
}


static public class MG_GAME_READYVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*MatchId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 6 /*PlayerId1*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 8 /*PlayerId2*/, 8 /*long*/, 8, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
